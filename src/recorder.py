"""
M√≥dulo especializado en la captura, procesamiento y reproducci√≥n de audio.
Este componente es fundamental para el sistema de an√°lisis de Fourier ya que
proporciona las se√±ales de audio que ser√°n posteriormente analizadas espectralmente.

FUNCIONALIDADES PRINCIPALES:
1. Grabaci√≥n de audio desde micr√≥fono con calidad profesional
2. Reproducci√≥n de archivos de audio
3. Gesti√≥n de archivos temporales y permanentes
4. Control de operaciones en tiempo real (cancelar/detener)
5. Integraci√≥n con el sistema de an√°lisis espectral

PAR√ÅMETROS DE AUDIO OPTIMIZADOS PARA AN√ÅLISIS DE FOURIER:
- Frecuencia de muestreo: 44100 Hz (est√°ndar de audio digital)
- Resoluci√≥n: 16 bits (int16)
- Canales: Mono (1 canal) - simplifica el an√°lisis espectral
"""

from tkinter import messagebox, Toplevel, Entry, Label, Button
import sounddevice as sd  # Biblioteca profesional para audio en tiempo real
import numpy as np        # Operaciones num√©ricas para procesamiento de se√±ales
import scipy.io.wavfile as wav  # Lectura/escritura de archivos WAV
import threading         # Operaciones as√≠ncronas para no bloquear UI
import os
from datetime import datetime
from audio_analyzer import AudioAnalyzer

# ======== CONFIGURACI√ìN GLOBAL DE AUDIO ========
"""
Par√°metros optimizados para an√°lisis de Fourier:

DURATION (10 seg): Tiempo suficiente para capturar patrones espectrales significativos
FS (44100 Hz): Frecuencia de Nyquist permite capturar frecuencias hasta 22050 Hz
               (rango completo de audici√≥n humana: 20Hz - 20kHz)
"""
DURATION = 10    # Duraci√≥n por defecto de grabaci√≥n (segundos)
FS = 44100       # Frecuencia de muestreo (Hz) - Est√°ndar profesional
OUTPUT_DIR = "assets/audio"  # Directorio para archivos permanentes
TEMP_DIR = "assets/temp"     # Directorio para archivos temporales

# Crear estructura de directorios si no existe
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs(TEMP_DIR, exist_ok=True)

# ======== VARIABLES GLOBALES DE ESTADO ========
last_audio_file = None        # Referencia al √∫ltimo archivo grabado/cargado
is_recording_cancelled = False # Flag para control de cancelaci√≥n de grabaci√≥n

def generate_filename(custom_name=None):
    """
    Genera nombres de archivo √∫nicos y seguros para el sistema operativo.
    """
    if custom_name:
        # Sanitizaci√≥n: solo permite caracteres alfanum√©ricos y algunos especiales
        custom_name = "".join(c for c in custom_name if c.isalnum() or c in (' ', '_', '-'))
        return os.path.join(OUTPUT_DIR, f"{custom_name}.wav")
    
    # Timestamp con formato YYYYMMDD_HHMMSS para ordenaci√≥n cronol√≥gica
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    return os.path.join(OUTPUT_DIR, f"input_sound_{timestamp}.wav")

def record_audio(update_status, duration):
    """
    Funci√≥n principal de grabaci√≥n de audio con monitoreo en tiempo real.
    
    Args:
        update_status (callable): Funci√≥n callback para actualizar UI
        duration (int): Duraci√≥n de grabaci√≥n en segundos
        
    PROCESO DE GRABACI√ìN:
    1. Inicializa el buffer de grabaci√≥n con par√°metros optimizados
    2. Captura audio en tiempo real desde el micr√≥fono
    3. Monitorea cancelaciones cada 0.1 segundos
    4. Guarda el archivo en formato WAV sin compresi√≥n
    5. Actualiza referencias globales para an√°lisis posterior
    """
    global last_audio_file, is_recording_cancelled
    is_recording_cancelled = False
    
    try:
        update_status(f"üéôÔ∏è Grabando por {duration} segundos... ¬°Habla!")
        
        # Configuraci√≥n del buffer de grabaci√≥n
        # int16: rango -32768 a 32767, suficiente resoluci√≥n para an√°lisis FFT
        recording = sd.rec(
            int(duration * FS),  # N√∫mero total de muestras
            samplerate=FS,       # Frecuencia de muestreo
            channels=1,          # Mono para simplificar an√°lisis
            dtype='int16'        # 16 bits de resoluci√≥n
        )
        
        # Monitoreo de cancelaci√≥n cada 100ms
        # Permite cancelaci√≥n responsiva sin afectar calidad de audio
        for i in range(duration * 10):  # 10 checks por segundo
            if is_recording_cancelled:
                sd.stop()  # Detiene inmediatamente la grabaci√≥n
                update_status("‚ùå Grabaci√≥n cancelada.")
                return
            sd.sleep(100)  # 100ms de espera
        
        # Generaci√≥n de archivo de salida
        output_file = generate_filename()
        
        # Guardado en formato WAV sin compresi√≥n
        # WAV preserva toda la informaci√≥n espectral necesaria para FFT
        wav.write(output_file, FS, recording)
        
        # Actualiza referencia global para otros m√≥dulos
        last_audio_file = output_file
        update_status(f"‚úÖ Grabaci√≥n completada.\nArchivo: {output_file}")
        
    except Exception as e:
        # Manejo robusto de errores con feedback espec√≠fico
        update_status(f"‚ùå Error: {e}")
    
    finally:
        # Limpieza de archivos temporales (si existen)
        # Nota: variable 'temp_file' no est√° definida en el c√≥digo actual
        # Esto parece ser c√≥digo residual de una versi√≥n anterior
        if 'temp_file' in locals() and temp_file and os.path.exists(temp_file):
            try:
                os.remove(temp_file)
            except:
                pass  # Ignora errores de limpieza

def cancel_recording():
    """
    Funci√≥n de cancelaci√≥n segura para grabaciones en curso.
    
    IMPORTANCIA:
    - Evita archivos corruptos o incompletos
    - Mantiene integridad del sistema de archivos
    - Proporciona control responsivo al usuario
    """
    global is_recording_cancelled
    is_recording_cancelled = True

def record_audio_thread(update_status, duration):
    """
    Wrapper para ejecutar grabaci√≥n en hilo separado.
    """
    threading.Thread(target=record_audio, args=(update_status, duration)).start()

def play_audio():
    """
    Reproduce el √∫ltimo archivo de audio grabado o cargado.
    """
    global last_audio_file
    
    if last_audio_file and os.path.exists(last_audio_file):
        # Lee archivo WAV completo en memoria
        fs, data = wav.read(last_audio_file)
        
        # Reproduce con par√°metros originales
        sd.play(data, fs)
        sd.wait()  # Bloquea hasta completar reproducci√≥n
    else:
        messagebox.showwarning("Archivo no encontrado", "No se encontr√≥ ning√∫n audio grabado.")

def get_last_audio_file():
    """
    Accessor para obtener referencia al √∫ltimo archivo de audio.
    """
    return last_audio_file

def stop_playback():
    """
    Detiene inmediatamente cualquier reproducci√≥n en curso.
    """
    try:
        sd.stop()  # Detiene inmediatamente cualquier operaci√≥n de audio
    except Exception as e:
        # Log de error sin interrumpir funcionamiento
        print(f"Error al detener reproducci√≥n: {e}")
